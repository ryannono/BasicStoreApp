// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String         @id @default(uuid())
  firstName        String
  lastName         String
  email            String         @unique
  password         String
  phoneNumber      String
  cart             Cart?
  stripeCustomerId String         @unique
  orders           Order[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  refreshTokens    RefreshToken[]
  savedAddresses   Address[]
}

model Cart {
  id     String     @id @default(uuid())
  items  CartItem[]
  user   User       @relation(fields: [userId], references: [id])
  userId String     @unique
}

model CartItem {
  id              String  @id @default(uuid())
  cart            Cart    @relation(fields: [cartId], references: [id])
  cartId          String
  product         Product @relation(fields: [productId], references: [id])
  productId       String
  productQuantity Int     @default(1)

  @@unique([cartId, productId])
}

model RefreshToken {
  id          String   @id @default(uuid())
  tokenUser   User     @relation(fields: [tokenUserId], references: [id])
  tokenUserId String
  token       String   @unique
  createdAt   DateTime @default(now())
  expiresAt   DateTime
}

model Product {
  id          String          @id @default(uuid())
  name        String          @unique
  images      ProductImage[]
  description String
  price       Float
  stock       Int             @default(100)
  category    ProductCategory @relation(fields: [categoryId], references: [id])
  categoryId  String
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  isPrimary Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  Products Product[]
}

model Order {
  id                    String      @id @default(uuid())
  user                  User?       @relation(fields: [userId], references: [id])
  userId                String?
  items                 OrderItem[]
  totalPrice            Float
  shippingAddress       Address     @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId     String
  stripePaymentIntentId String      @unique
  orderStatus           OrderStatus @default(paymentInitiated)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
}

model OrderItem {
  id              String  @id @default(uuid())
  order           Order   @relation(fields: [orderId], references: [id])
  orderId         String
  product         Product @relation(fields: [productId], references: [id])
  productId       String
  productQuantity Int     @default(1)

  @@unique([orderId, productId])
}

enum OrderStatus {
  paymentInitiated
  paymentSucceeded
  shipped
  delivered
}

model Address {
  id           String  @id @default(uuid())
  addressLine1 String
  addressLine2 String?
  city         String
  province     String
  postalCode   String
  country      String
  orders       Order[]
  users        User[]
}
